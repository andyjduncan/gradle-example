name: Java-CI

# on:
#   push:
#     branches:
#       - master
#     paths-ignore:
#       - '.github/workflows/**'


on:
  pull_request:
  push:
    branches:
      - master

jobs:
  analyze:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: [sonarcloud, semgrep]
    env: 
       LANGUAGE: 'java'
       VERSION: '17'
       DISTRIBUTION: 'adopt'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK (only for SonarCloud)
        if: matrix.tool == 'sonarcloud'
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.tool == 'sonarcloud' && env.VERSION || '8' }}
          distribution: ${{ env.DISTRIBUTION }}
          
      - name: Verify Java Version
        if: matrix.tool == 'sonarcloud'
        run: java -version

      - name: Print JAVA_HOME and PATH
        if: matrix.tool == 'sonarcloud'
        run: |
          echo "JAVA_HOME: $JAVA_HOME"
          echo "PATH: $PATH"

      # - name: Build with Gradle
        # if: matrix.tool == 'sonarcloud'
        # run: ./gradlew build

      - name: Cache SonarCloud scanner
        if: matrix.tool == 'sonarcloud'
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        if: matrix.tool == 'sonarcloud'
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
          
      - name: Build and analyze
        if: matrix.tool == 'sonarcloud'
        env:
         # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar --info


      - name: Run Semgrep
        if: matrix.tool == 'semgrep'
        uses: returntocorp/semgrep-action@v1
        with:
          config: 'p/ci'

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew shadowJar
        
      - name: List build artifacts
        run: ls -al build/libs
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: login into Docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

        
      - name: Build and push Docker image
        run: |
          docker build -t gradle-example-app .
          docker tag gradle-example-app ${{ secrets.DOCKER_USERNAME }}/gradle-example-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/gradle-example-app:latest
        
      # - name: Build and push
      #   uses: docker/build-push-action@v6
      #   with:
      #     push: false
      #     tags: gradle-image:latest
      #    # tags: ${{ vars.DOCKERHUB_USERNAME }}/clockbox:latest
        
      - name: Run the application
        run: java -jar build/libs/gradle-example-all.jar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/gradle-example-app:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

